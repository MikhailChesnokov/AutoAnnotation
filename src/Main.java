import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import static java.util.stream.Collectors.toCollection;

class Main {
    private final static Map<String,Integer> tokensFrequencies = new TreeMap<>();
    private final static int compressionPercent = 30;

    public static void main(String[] args) {
        // TODO: keyword list

        Map<String,List<String>> sentenceToTokenList = runMyStem()
                .stream()
                .flatMap(Main::splitIntoSentences)
                .collect(Collectors.toMap(Main::removeTokens, Main::fetchTokenList));

        sentenceToTokenList.forEach((sentence, tokens) -> tokens.forEach(Main::countFrequency));

        // TODO: Remove stop-words

        Map<String,Integer> sentenceToWeight = sentenceToTokenList.entrySet()
                .stream()
                .collect(Collectors.toMap(Map.Entry::getKey, map -> map.getValue()
                        .stream()
                        .reduce(0, (acc, token) -> acc + tokensFrequencies.get(token), (y,z)->y+z)));

        // TODO: Sorted output

        sentenceToWeight
                .entrySet()
                .stream()
                .sorted(Map.Entry.comparingByValue((x,y)->y-x))
                .limit(sentenceToWeight.size() * compressionPercent / 100)
                .forEach(x->System.out.println(x.getKey() + " W=" + x.getValue()));
    }

    private static List<String> runMyStem() {
        // MyStem and Docs: https://tech.yandex.ru/mystem/
        ProcessBuilder myStemProcessBuilder = new ProcessBuilder("C:/Users/MIKHAIL/Desktop/mystem.exe","-cs", "C:/Users/MIKHAIL/Desktop/text.txt");

        Process myStemProcess = null;
        try {
            myStemProcess = myStemProcessBuilder.start();
        } catch (IOException e) {
            System.out.println("Cannot run MyStem: " + e.getMessage());
        }

        List<String> paragraphs = new ArrayList<>();
        try (BufferedReader outputReader = new BufferedReader(new InputStreamReader(myStemProcess.getInputStream()))) {
            String outputLine;
            while ((outputLine = outputReader.readLine()) != null) {
                paragraphs.add(outputLine.trim());
            }
        } catch (IOException e) {
            System.out.println("Cannot read MyStem output: " + e.getMessage());
        }

        try {
            myStemProcess.waitFor();
        } catch (InterruptedException e) {
            System.out.println("Cannot stop MyStem: " + e.getMessage());
        }

        return paragraphs;
    }

    private static Stream<String> splitIntoSentences(String paragraph) {
        return Arrays.stream(paragraph.split(" \\{\\\\s}"));
    }

    private static List<String> fetchTokenList(String sentence) {
        // This matcher will capture first token from the token group surrounded by '{' and '}' and generated by MyStem
        // Example: {выходить|выхаживать} -> выходить
        Matcher tokenMatcher = Pattern.compile("(?<=\\{).*?(?=[}|])").matcher(sentence);
        if (tokenMatcher.find())
            return Stream
                    .generate(tokenMatcher::group)
                    .takeWhile(x -> tokenMatcher.find())
                    .collect(toCollection(ArrayList::new));
        return new ArrayList<>();
    }

    private static String removeTokens(String sentence) {
        return sentence.replaceAll("\\{.*?}","");
    }

    private static void countFrequency(String token) {
        tokensFrequencies.put(token, tokensFrequencies.containsKey(token) ? tokensFrequencies.get(token) + 1 : 1);
    }
}