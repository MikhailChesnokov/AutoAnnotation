import java.util.*;
import java.util.regex.*;
import java.util.stream.Stream;

import static java.util.stream.Collectors.toCollection;

class SentenceProcessor {
    /**
     * Takes a paragraph processed by the MyStem and returns a stream of splitted sentences.
     * Input example: "Аптека{аптека}. {\s}Улица{улица}. {\s}Фонарь{фонарь}."
     * Output example: { "Аптека{аптека}." , "Улица{улица}." , "Фонарь{фонарь}." }
     * @param paragraph a group of sentences divided by the MyStem sentence splitter " {\s}".
     * @return a stream of splitted sentences.
     */
    static Stream<String> splitParagraphIntoSentences(String paragraph) {
        return Arrays.stream(paragraph.split(" \\{\\\\s}"));
    }

    /**
     * Returns a list of tokens fetched from a generated by the MyStem sentence.
     * Input example: "Пассажиры{пассажир} выходят{выходить|выхаживать} на{на} закрытый{закрытый|закрывать} перрон{перрон}.".
     * Output example: "пассажир" , "выходить", "на", "закрытый", "перрон".
     * @param sentence a sentence containing tokens surrounded by '{' and '}' and splitted by '|'.
     * @return a list of tokens
     */
    static List<String> fetchTokenList(String sentence) {
        Matcher tokenMatcher = Pattern.compile("(?<=\\{).*?(?=[}|])").matcher(sentence);
        if (tokenMatcher.find())
            return Stream
                    .generate(tokenMatcher::group)
                    .takeWhile(x -> tokenMatcher.find())
                    .collect(toCollection(ArrayList::new));
        return new ArrayList<>();
    }

    /**
     * Takes a sentence that was processed by the MyStem and returns the initial one.
     * Input example: "Пассажиры{пассажир} выходят{выходить|выхаживать} на{на} закрытый{закрытый|закрывать} перрон{перрон}.".
     * Output example: "Пассажиры выходят на закрытый перрон.".
     * @param sentence a sentence containing tokens surrounded by '{' and '}' and splitted by '|'.
     * @return the sentence without tokens.
     */
    static String removeAllTokens(String sentence) {
        return sentence.replaceAll("\\{.*?}","");
    }
}